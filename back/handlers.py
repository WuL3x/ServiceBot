import re
import time

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile, WebAppInfo, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.exceptions import CantInitiateConversation

from back.config import CHANNEL_ID
from back.form_kons import konsult
from back.form_reg import register
from back.form_upgrade import upgrade

# from form_reg import register
from keyboards import bt_sec, kb1, bt_kat
from main import bot, dp
from texts import place, comp, remont


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.answer(
        f'''–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!\n–Ø –±–æ—Ç, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞''',
        reply_markup=bt_sec)
    time.sleep(1)
    await main_menu(message)


@dp.callback_query_handler(text=['menu'])
async def main_menu(callback: types.callback_query):
    await bot.send_message(callback.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëáüèª', reply_markup=kb1)


@dp.message_handler(lambda message: message.text == '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', state='*')
async def back_to_menu(message: types.Message):
    await bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=bt_sec)
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëáüèª', reply_markup=kb1)


konsult()
register()
upgrade()

@dp.callback_query_handler(text_contains='', state='*')
async def all_message(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state()
    await state.finish()
    code = callback.data
    match code:
        case 'katalog':
            await bot.send_photo(callback.from_user.id, InputFile("Photo/remont.png"), caption=remont,
                                 reply_markup=bt_kat)
        case 'place':
            await bot.send_photo(callback.from_user.id, InputFile("Photo/map.PNG"), caption=place, reply_markup=bt_sec)
            await bot.send_location(callback.from_user.id, 55.544813, 37.516697, '–°–µ—Ä–≤–∏–≥–æ', '–ú–æ—Å–∫–≤–∞')
            time.sleep(1)
            await main_menu(callback)
        case 'company':
            await bot.send_photo(callback.from_user.id, InputFile("Photo/gorshok.jpg"), caption=comp,
                                 reply_markup=bt_sec)
            time.sleep(1)
            await main_menu(callback)


@dp.message_handler(text_contains='', state='*')
async def kat_info(message: types.Message, state: FSMContext):
    await state.set_state()
    await state.finish()
    code = message.text
    bt_reg = InlineKeyboardMarkup()
    bt_reg.add(InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç', callback_data='register'))
    bt_uprgade = InlineKeyboardMarkup()
    bt_uprgade.add(InlineKeyboardButton(text='–û—Å–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –∞–ø–≥—Ä–µ–π–¥', callback_data='upgrade'))
    match code:
        case '–†–µ–º–æ–Ω—Ç':
            await bot.send_message(message.from_user.id, text='''–ù—É —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–µ–º–æ–Ω—Ç–∞\n—Ç—É—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–º–Ω—Ç–Ω—ã—Ö 
—Ä–∞–±–æ—Ç –∏ –ø—Ä–æ—á–∞—è —Ö—É–π–Ω—è\n–ü–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç''', reply_markup=bt_reg)

        case '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞':
            await bot.send_message(message.from_user.id, text='–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∏–º –∏ —Å–∫–∞–∂–µ–º —á—Ç–æ –Ω–µ —Ç–∞–∫', reply_markup=bt_reg)
        case '–ê–ø–≥—Ä–µ–π–¥ –ü–ö':
            await bot.send_message(message.from_user.id, text='–ù—É —Ç—É—Ç –Ω—É–∂–Ω–æ —á–µ–∫–∞—Ç—å –≤ –î–ù–° —Ü–µ–Ω—ã.', reply_markup=bt_uprgade)
        case '–£–¥–∞–ª–µ–Ω–∏–µ –≤–∏—Ä—É—Å–æ–≤':
            await bot.send_message(message.from_user.id, text='–Ω–∞—Ö—É–π –Ω–µ –Ω—É–∂–Ω—ã –≤–∞–º —ç—Ç–∏ –≤–∏—Ä—É—Å—ã –ø–æ–≥–∞–Ω—ã–µ!\n–ú—ã —ç—Ç–æ, –∞–Ω—Ç–∏—Å–µ–ø—Ç–∏–∫ –≤–∞—à.')
        case '–ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä?':
            await bot.send_message(message.from_user.id, text='–ê –º–æ–∂–µ—Ç –Ω—É –µ–≥–æ... –ö–æ–º–ø—ã —ç—Ç–∏ —Å–ª–æ–∂–Ω—ã–µ, –∞?\n –∏ –∫—Å—Ç–∞—Ç–∏, –Ω–µ –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –±–æ–ª—å—à–µ')
            await bot.send_message(message.from_user.id, text='–ë–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ —Ç—É–ø–æ–≥–æ–ª–æ–≤—ã–π')
        case '–°–±–æ—Ä–∫–∞':
            await bot.send_message(message.from_user.id, text='–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —Å–±–æ—Ä–∫—É –ø–∫. –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ, —Å–æ–æ–±—â–∏—Ç–µ.')



@dp.callback_query_handler(text='register')
async def my_callback_handler(callback_query: types.CallbackQuery):
    try:
        print("Button clicked!")
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, "Button clicked!")
    except Exception as e:
        print(f"Error: {e}")


@dp.message_handler(chat_id=CHANNEL_ID)
async def admin_reply(message: types.Message):
    # me = await bot.get_me()
    # if not message.reply_to_message:
    #     return
    # if message.reply_to_message.from_user.id != me.id:
    #     return
    # if not message.text:
    #     await bot.send_message(message.chat.id, "–Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
    #     return
    # if message.reply_to_message.text.split('\n')[0] not in keyboards.vturmu:
    #     return
    # if not message.reply_to_message.text.__contains__(", "):
    #     return

    bt_info=InlineKeyboardMarkup()
    bt_info.add(InlineKeyboardButton(text='–ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤', callback_data='info'))

    # –ü–∞—Ä—Å–∏–º id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    head = message.reply_to_message.text.split('\n')[0].split()[0]
    if head == '–û–±—Ä–∞—â–µ–Ω–∏–µ':
        uid = message.reply_to_message.text.split('\n')[2].split()[1]
        feedback = message.reply_to_message.text.split('\n')[5]
        text = f'"{feedback}"'
        try:
            await bot.send_message(uid, f'''{text}
‚ö†–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: üëáüèª\n{message.text}
–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–π, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ''',reply_markup=bt_info)
        except CantInitiateConversation:
            await bot.reply("–û—à–∏–±–∫–∞\n")
    elif head == '–ó–∞—è–≤–∫–∞':
        uid = message.reply_to_message.text.split('\n')[2].split()[1]
        feedback = message.reply_to_message.text.split('\n')[0].split()[3].rstrip(':')
        text = f'"{feedback}"'
        try:
            await bot.send_message(uid, f'''–†–µ–º–æ–Ω—Ç {text}
‚ö†–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: üëáüèª\n{message.text}
–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–π, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ''',reply_markup=bt_info)
        except CantInitiateConversation:
            await bot.reply("–û—à–∏–±–∫–∞\n")
    elif head == '–ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è':
        uid = message.reply_to_message.text.split('\n')[2].split()[1]
        try:
            await bot.send_message(uid, f'''–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.
–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–π, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ''',reply_markup=bt_info)
        except CantInitiateConversation:
            await bot.reply("–û—à–∏–±–∫–∞\n")
