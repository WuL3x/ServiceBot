import sqlite3
from aiogram import types
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.storage import FSMContextProxy
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from back.config import CHANNEL_ID, admins
from back.form_kons import konsult
from back.form_reg import register
# from back.form_upgrade import upgrade
# from form_reg import register
from keyboards import bt_sec, kb1, bt_kat
from main import bot, dp
from texts import place, comp, virus, diag, uslugi, remont, start


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    global conn, cursor
    if message.chat.type != 'private':
        await bot.send_message(CHANNEL_ID, text='–ß–∞—Ç –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ')
    else:
        await message.answer(
            f'''–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!üñê''')
        await bot.send_photo(message.from_user.id, InputFile('Media/logo.png'), caption=start, reply_markup=bt_sec)

    try:
        conn = sqlite3.connect('E:/sqlite3/Servigo')
        cursor = conn.cursor()
        conn.execute("PRAGMA autocommit = 1")
        print(f'–ë–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –¥–ª—è {message.from_user.id}.')
    except sqlite3.Error as error:
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite:', error)
    finally:
        if conn:
            cursor.close()
            conn.close()



@dp.message_handler(commands=['status'], chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def update_status(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    #
    # if message.chat.id != CHANNEL_ID:
    #     return
    print(message.chat.id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:")


@dp.message_handler(chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def process_order_status(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    order_id = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    if not order_id.isdigit():
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('E:/sqlite3/Servigo')
    cursor = conn.cursor()
    query = "SELECT id_status FROM Orders WHERE id_order=?"
    cursor.execute(query, (order_id,))
    current_status_id = cursor.fetchone()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not current_status_id:
        await message.reply(f"–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞–∫–∞–∑–∞
    status_buttons = [
        types.InlineKeyboardButton("–ù–µ –Ω–∞—á–∞—Ç–æ", callback_data=f"status:{order_id}:1"),
        types.InlineKeyboardButton("–í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data=f"status:{order_id}:2"),
        types.InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"status:{order_id}:3")
    ]

    # –°–æ–∑–¥–∞–µ–º InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    status_keyboard = types.InlineKeyboardMarkup(row_width=1)
    status_keyboard.add(*status_buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:", reply_markup=status_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('status:'))
async def process_order_status(callback_query: types.CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ callback query
    data = callback_query.data.split(':')
    order_id = data[1]
    new_status_id = data[2]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('E:/sqlite3/Servigo')
    cursor = conn.cursor()
    query = "UPDATE Orders SET id_status=? WHERE id_order=?"
    cursor.execute(query, (new_status_id, order_id))
    conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    id_client = callback_query.from_user.id
    query = "SELECT order_status FROM status WHERE id_status = ?"
    cursor.execute(query, (new_status_id,))
    status_name = cursor.fetchone()[0]
    print(id_client)
    await bot.send_message(id_client, text=f'–í–∞—à –∑–∞–∫–∞–∑ –æ–±–Ω–æ–≤–∏–ª —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å: {status_name} üåö')


@dp.callback_query_handler(text=['menu'])
async def main_menu(callback: types.CallbackQuery):
    await bot.send_message(callback.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëáüèª', reply_markup=kb1)


@dp.message_handler(lambda message: message.text == 'üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', state='*')
async def back_to_menu(message: types.Message):
    await bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=bt_sec)
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëáüèª', reply_markup=kb1)


konsult()
register()
# upgrade()

@dp.message_handler(commands=['status'])
@dp.message_handler(text='–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞')
@dp.callback_query_handler(text='order_info')
async def process_show_orders(callback_query: types.CallbackQuery):
    id_client = callback_query.from_user.id
    orders = await get_orders_for_client(id_client)  # await the coroutine
    if orders != False:
        buttons = [InlineKeyboardButton(str(order), callback_data=f"–ó–∞–∫–∞–∑ ‚Ññ:{order}") for order in orders]
        keyboard = InlineKeyboardMarkup(row_width=2).add(*buttons)
        await bot.send_message(id_client, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:", reply_markup=keyboard)
    else:
        await bot.send_message(id_client, "üò• –£ –í–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")


async def get_orders_for_client(id_client):
    with sqlite3.connect('E:/sqlite3/Servigo') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM Orders WHERE id_client=?", (id_client,))
        count = cursor.fetchone()[0]
        if count > 0:
            cursor.execute("SELECT id_order FROM Orders WHERE id_client=?", (id_client,))
            orders = cursor.fetchall()
            return [order[0] for order in orders]
        else:
            return False  # –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('–ó–∞–∫–∞–∑ ‚Ññ'))
async def process_get_data(callback_query: types.CallbackQuery):
    id_order = callback_query.data.split(':')[1]
    with sqlite3.connect('E:/sqlite3/Servigo') as conn:
        cursor = conn.cursor()
        order_tp='''UPDATE Orders
                SET total_price = (
                    SELECT SUM(s.price)
                    FROM OrderServices AS os
                    JOIN Services AS s ON os.order_id = s.id_service
                    WHERE os.order_id = ?
                )
                WHERE id_order = ?'''
        order_total = cursor.execute(order_tp, (id_order, id_order))
        print(order_total)
        order_zp = '''SELECT Orders.id_order, Clients.tg_username, Clients.familiya_imya, Clients.phone, 
                Orders.device_type, Orders.dev_name, Orders.issue, Orders.total_price, Status.order_status 
                FROM Orders 
                JOIN Clients ON Orders.id_client = Clients.id_client 
                JOIN Status ON Orders.id_status = Status.id_status 
                WHERE Orders.id_order = ?'''
        order_data = cursor.execute(order_zp, (id_order,)).fetchone()
    if order_data:
        text = f"–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç: {order_data[5]}:\n"
        text += f"TG user name: @{order_data[1]}\n"
        text += f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_data[0]}\n"
        if order_data[4] != '–ü–ö':
            text += f"–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {order_data[5]}\n"
        text += f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {order_data[6]}\n"
        text += f"–§–∞–º–∏–ª–∏—è –∏ –∏–º—è: {order_data[2]}\n"
        text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {order_data[3]}\n"
        text += f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order_data[8]}\n"
        text += f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {order_data[7]} ‚ÇΩ"
        await bot.send_message(callback_query.from_user.id, text=text)
    else:
        await bot.send_message(callback_query.from_user.id, text="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")


@dp.callback_query_handler(text='my_orders')
async def process_my_orders(callback_query: types.CallbackQuery):
    await process_show_orders(callback_query)


@dp.callback_query_handler(text='all_orders')
async def process_all_orders(callback_query: types.CallbackQuery):
    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ)
    pass


@dp.message_handler(chat_id=CHANNEL_ID)
async def admin_reply(message: types.Message):
    if message.reply_to_message is None:
        return
    bt_info = InlineKeyboardMarkup()
    bt_info.add(InlineKeyboardButton(text='–ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤', callback_data='info'))
    # –ü–∞—Ä—Å–∏–º id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    head = message.reply_to_message.text.split('\n')[0].split()[0]
    if head == '–û–±—Ä–∞—â–µ–Ω–∏–µ':
        type = message.reply_to_message.text.split('\n')[3].split(':')[1][1:]
        if type != '–û—Ç–∑—ã–≤':
            uid = message.reply_to_message.text.split('\n')[2].split()[1]
            feedback = message.reply_to_message.text.split('\n')[5]
            text = f'"{feedback}"'
            await bot.send_message(uid, f'''–í–æ–ø—Ä–æ—Å: {text}
–û—Ç–≤–µ—Ç: {message.text}''', reply_markup=bt_info)

        elif type == '–û—Ç–∑—ã–≤':
            await bot.send_message(CHANNEL_ID, text='–≠—Ç–æ –æ—Ç–∑—ã–≤, –µ–±–ª–∞–Ω!')

    elif head == '–í–æ–ø—Ä–æ—Å':
        uid = message.reply_to_message.text.split('\n')[1].split()[1]
        await bot.send_message(uid, f'''–û—Ç–≤–µ—Ç: {message.text}''', reply_markup=bt_info)

    elif head == '–ó–∞—è–≤–∫–∞':
        uid = message.reply_to_message.text.split('\n')[2].split()[1]
        feedback = message.reply_to_message.text.split('\n')[0].split()[3].rstrip(':')
        text = f'"{feedback}"'
        await bot.send_message(uid, f'''–†–µ–º–æ–Ω—Ç {text}
–û—Ç–≤–µ—Ç: {message.text}''', reply_markup=bt_info)

    elif head == '–ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è':
        uid = message.reply_to_message.text.split('\n')[2].split()[1]
        await bot.send_message(uid, f'''–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ê –Ω–µ –ø–æ–π—Ç–∏ –ª–∏ –≤–∞–º —Å –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–µ–π –Ω–∞—Ö–∑—É–π?''',
                               reply_markup=bt_info)


class Form_vopros(StatesGroup):
    wait_vopros = State()
    wait_otvet = State()


@dp.callback_query_handler(text='info')
async def voprosiki(callback: types.CallbackQuery):
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:')
    await Form_vopros.wait_vopros.set()


@dp.message_handler(state=Form_vopros.wait_vopros)
async def get_vopros(message: types.Message, state: FSMContext):
    vopros = message.text
    await state.update_data(question=vopros)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.send_message(CHANNEL_ID, text=f'''–í–æ–ø—Ä–æ—Å:\nTG_ID: {message.from_user.id}
–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}:
{vopros}
    ''')
    await bot.send_message(message.from_user.id, text='–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –æ–∂–∏–¥–∞–π—Ç–µ!')
    await Form_vopros.wait_otvet.set()  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞


@dp.message_handler(state=Form_vopros.wait_otvet)
async def process_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    question = data.get('question')
    await bot.send_message(question.from_user.id, text=f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å: {message.text}')
    await bot.send_message(CHANNEL_ID,
                           text=f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {question.from_user.id}:\n{message.text}')


# –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
#
async def show_services(message: types.Message):
    conn = sqlite3.connect('E:/sqlite3/Servigo')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Services
    query = "SELECT * FROM Services"
    cursor.execute(query)
    services = cursor.fetchall()

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —É—Å–ª—É–≥
    buttons = []
    for service in services:
        buttons.append([InlineKeyboardButton(service[1], callback_data=f'service:{service[1]}')])

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    ser_but = InlineKeyboardMarkup(buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:', reply_markup=ser_but)

    conn.close()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('service:'))
async def show_service_info(callback: types.CallbackQuery):
    conn = sqlite3.connect('E:/sqlite3/Servigo')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º id —É—Å–ª—É–≥–∏ –∏–∑ callback_data
    service_id = callback.data.split(':')[1]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Services –ø–æ id
    query = "SELECT name, price FROM Services WHERE id_service=?"
    cursor.execute(query, (service_id,))
    service_info = cursor.fetchone()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Ü–µ–Ω–æ–π —É—Å–ª—É–≥–∏
    await callback.message.answer(f'–û–ø–∏—Å–∞–Ω–∏–µ: {service_info[1]}\n–¶–µ–Ω–∞: {service_info[3]}')

    conn.close()


@dp.callback_query_handler(text_contains='', state='*')
async def all_message(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state()
    await state.finish()
    code = callback.data
    match code:
        case 'katalog':
            await bot.send_photo(callback.from_user.id, InputFile("Media/uslugi.png"), caption=uslugi,
                                 reply_markup=bt_kat)
        case 'place':
            await bot.send_photo(callback.from_user.id, InputFile("Media/map.PNG"), caption=place, reply_markup=bt_sec)
            await bot.send_location(callback.from_user.id, 55.544813, 37.516697, '–°–µ—Ä–≤–∏–≥–æ', '–ú–æ—Å–∫–≤–∞')
            # time.sleep(1)
            # await main_menu(callback)
        case 'company':
            await bot.send_photo(callback.from_user.id, InputFile("Media/gorshok.jpg"), caption=comp,
                                 reply_markup=bt_sec, )

            # time.sleep(1)
            # await main_menu(callback)


# –í—ã–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π —Ç–∞–±–ª–∏—Ü—ã Sevices –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è


@dp.message_handler(text_contains='', state='*')
async def kat_info(message: types.Message, state: FSMContext):
    await state.set_state()
    await state.finish()
    code = message.text
    bt_reg = InlineKeyboardMarkup()
    bt_reg.add(InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data='register'))
    bt_uprgade = InlineKeyboardMarkup()
    bt_uprgade.add(InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∞–ø–≥—Ä–µ–π–¥', callback_data='upgrade'))
    match code:
        case '‚ÇΩ –ù–∞—à–∏ —Ü–µ–Ω—ã ‚ÇΩ':
            await bot.send_document(message.from_user.id, InputFile('Media/pricelist.png'))
        case 'üõ† –†–µ–º–æ–Ω—Ç':
            await bot.send_photo(message.from_user.id, InputFile('Media/remont.jpg'), caption=remont,
                                 reply_markup=bt_reg)
            # await show_services(message)
        case 'üíâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞':
            await bot.send_photo(message.from_user.id, InputFile('Media/diag.jpg'), caption=diag, reply_markup=bt_reg)
        case 'üìà –ê–ø–≥—Ä–µ–π–¥ –ü–ö':
            await bot.send_message(message.from_user.id, text='–ù—É —Ç—É—Ç –Ω—É–∂–Ω–æ —á–µ–∫–∞—Ç—å –≤ –î–ù–° —Ü–µ–Ω—ã.',
                                   reply_markup=bt_uprgade)
        # case '–£–¥–∞–ª–µ–Ω–∏–µ –≤–∏—Ä—É—Å–æ–≤':
        #     await bot.send_photo(message.from_user.id, InputFile("Media/virus.jpg"), caption=virus)
        # case '–ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä?':
        #     await bot.send_message(message.from_user.id,
        #                            text='–ê –º–æ–∂–µ—Ç –Ω—É –µ–≥–æ... –ö–æ–º–ø—ã —ç—Ç–∏ —Å–ª–æ–∂–Ω—ã–µ, –∞?\n –∏ –∫—Å—Ç–∞—Ç–∏, –Ω–µ –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –±–æ–ª—å—à–µ')
        #     await bot.send_message(message.from_user.id, text='–ë–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ —Ç—É–ø–æ–≥–æ–ª–æ–≤—ã–π')
        case 'üñ• ‚ûï üéÆ –°–±–æ—Ä–∫–∞':
            await bot.send_message(message.from_user.id,
                                   text='–ü—Ä–∏–≤–æ–∑–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ. –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —Å–æ–±—Ä–∞—Ç—å –ü–ö! ')

# @dp.message_handler(commands=['/orders'])
# async def show_orders(message: types.Message):
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –∞–¥–º–∏–Ω-—á–∞—Ç–∞
#     if message.chat.id != CHANNEL_ID:
#         return
#
#     # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     conn = sqlite3.connect('E:/sqlite3/Servigo')
#     cursor = conn.cursor()
#
#     # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Orders
#     query = "SELECT * FROM Orders"
#     cursor.execute(query)
#     orders = cursor.fetchall()
#
#     # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
#     status_buttons = []
#     query = "SELECT * FROM status"
#     cursor.execute(query)
#     statuses = cursor.fetchall()
#     for status in statuses:
#         status_buttons.append([types.InlineKeyboardButton(status[1], callback_data=f'status:{status[0]}')])
#
#     # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥"
#     back_button = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
#
#     # –°–æ–∑–¥–∞–µ–º InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –∫–Ω–æ–ø–∫–æ–π "–Ω–∞–∑–∞–¥"
#     status_keyboard = types.InlineKeyboardMarkup(status_buttons)
#     status_keyboard.add(back_button)
#
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
#     for order in orders:
#         status_id = order[5]
#         query = "SELECT name FROM status WHERE id_status=?"
#         cursor.execute(query, (status_id,))
#         status_name = cursor.fetchone()[0]
#         status_text = f'–°—Ç–∞—Ç—É—Å: {status_name}\n'
#         order_text = f'{order[1]} {order[2]} ({order[3]})\n{order[4]}\n{status_text}'
#         await message.reply(order_text, reply_markup=status_keyboard)
#
#     # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
#     conn.close()
#
#
# # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
# @dp.callback_query_handler(lambda c: c.data and c.data.startswith('status:'))
# async def change_order_status(callback: types.CallbackQuery):
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –∞–¥–º–∏–Ω-—á–∞—Ç–∞
#     if callback.message.chat.id != CHANNEL_ID:
#         return
#
#     # –ü–æ–ª—É—á–∞–µ–º id –∑–∞–∫–∞–∑–∞ –∏ id —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ callback_data
#     order_id = callback.message.text.split('\n')[0]
#     status_id = int(callback.data.split(':')[1])
#
#     # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     conn = sqlite3.connect('E:/sqlite3/Servigo')
#     cursor = conn.cursor()
#
#     # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ Orders
#     query = "UPDATE Orders SET id_status=? WHERE id=?"
#     cursor.execute(query, (status_id, order_id))
#     conn.commit()
#
#     # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã status
#     query = "SELECT name FROM status WHERE id_status=?"
#     cursor.execute(query, (status_id,))
#     status_name = cursor.fetchone()[0]
#
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
#     await callback.answer(f'–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "{status_name}"')
#
#     # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
#     conn.close()
#
#     # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
#     await show_orders(callback.message)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
# @dp.callback_query_handler(lambda c: c.data == 'back')
# async def back_to_orders(callback: types.CallbackQuery):
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –∞–¥–º–∏–Ω-—á–∞—Ç–∞
#     if callback.message.chat.id != CHANNEL_ID:
#         return
#     # –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥", –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
#     await show_orders(callback.message)
