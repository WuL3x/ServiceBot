import re
import time
import json
import pickle
import sqlite3
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import state
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InputFile, WebAppInfo, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.exceptions import CantInitiateConversation

from back.config import CHANNEL_ID
from back.form_kons import konsult
from back.form_reg import register
from back.form_upgrade import upgrade

# from form_reg import register
from keyboards import bt_sec, kb1, bt_kat
from main import bot, dp
from texts import place, comp, virus, diag, uslugi, remont, start


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    global conn, cursor
    await message.answer(
        f'''–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!üñê''')
    await bot.send_photo(message.from_user.id, InputFile('Photo/logo.png'), caption=start, reply_markup=bt_sec)
    # time.sleep(1)
    # await main_menu(message)

    try:
        conn = sqlite3.connect('E:/sqlite3/Servigo')
        cursor = conn.cursor()
        conn.execute("PRAGMA autocommit = 1")
        print('–ë–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞')
    except sqlite3.Error as error:
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite:', error)
    finally:
        if conn:
            cursor.close()
            conn.close()


@dp.callback_query_handler(text=['menu'])
async def main_menu(callback: types.callback_query):
    await bot.send_message(callback.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëáüèª', reply_markup=kb1)


@dp.message_handler(lambda message: message.text == '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', state='*')
async def back_to_menu(message: types.Message):
    await bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=bt_sec)
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëáüèª', reply_markup=kb1)


konsult()
register()
upgrade()


@dp.message_handler(chat_id=CHANNEL_ID)
async def admin_reply(message: types.Message):
    if message.reply_to_message is None:
        return
    bt_info = InlineKeyboardMarkup()
    bt_info.add(InlineKeyboardButton(text='–ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤', callback_data='info'))
    # –ü–∞—Ä—Å–∏–º id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    head = message.reply_to_message.text.split('\n')[0].split()[0]
    if head == '–û–±—Ä–∞—â–µ–Ω–∏–µ':
        type = message.reply_to_message.text.split('\n')[3].split(':')[1][1:]
        if type != '–û—Ç–∑—ã–≤':
            uid = message.reply_to_message.text.split('\n')[2].split()[1]
            feedback = message.reply_to_message.text.split('\n')[5]
            text = f'"{feedback}"'
            await bot.send_message(uid, f'''–í–æ–ø—Ä–æ—Å: {text}
–û—Ç–≤–µ—Ç: {message.text}''', reply_markup=bt_info)

        elif type == '–û—Ç–∑—ã–≤':
            await bot.send_message(CHANNEL_ID, text='–≠—Ç–æ –æ—Ç–∑—ã–≤, –µ–±–ª–∞–Ω!')

    elif head == '–í–æ–ø—Ä–æ—Å':
        uid = message.reply_to_message.text.split('\n')[1].split()[1]
        await bot.send_message(uid, f'''–û—Ç–≤–µ—Ç: {message.text}''', reply_markup=bt_info)

    elif head == '–ó–∞—è–≤–∫–∞':
        uid = message.reply_to_message.text.split('\n')[2].split()[1]
        feedback = message.reply_to_message.text.split('\n')[0].split()[3].rstrip(':')
        text = f'"{feedback}"'
        await bot.send_message(uid, f'''–†–µ–º–æ–Ω—Ç {text}
–û—Ç–≤–µ—Ç: {message.text}''', reply_markup=bt_info)

    elif head == '–ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è':
        uid = message.reply_to_message.text.split('\n')[2].split()[1]
        await bot.send_message(uid, f'''–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.''', reply_markup=bt_info)


class Form_vopros(StatesGroup):
    wait_vopros = State()
    wait_otvet = State()


@dp.callback_query_handler(text='info')
async def voprosiki(callback: types.CallbackQuery):
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:')
    await Form_vopros.wait_vopros.set()


@dp.message_handler(state=Form_vopros.wait_vopros)
async def get_vopros(message: types.Message, state: FSMContext):
    vopros = message.text
    await state.update_data(question=vopros)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.send_message(CHANNEL_ID, text=f'''–í–æ–ø—Ä–æ—Å:\nTG_ID: {message.from_user.id}
–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}:
{vopros}
    ''')
    await bot.send_message(message.from_user.id, text='–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –æ–∂–∏–¥–∞–π—Ç–µ!')
    await Form_vopros.wait_otvet.set()  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞


@dp.message_handler(state=Form_vopros.wait_otvet)
async def process_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    question = data.get('question')
    await bot.send_message(question.from_user.id, text=f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å: {message.text}')
    await bot.send_message(CHANNEL_ID,
                           text=f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {question.from_user.id}:\n{message.text}')


# –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

@dp.callback_query_handler(text_contains='', state='*')
async def all_message(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state()
    await state.finish()
    code = callback.data
    match code:
        case 'katalog':
            await bot.send_photo(callback.from_user.id, InputFile("Photo/uslugi.png"), caption=uslugi,
                                 reply_markup=bt_kat)
        case 'place':
            await bot.send_photo(callback.from_user.id, InputFile("Photo/map.PNG"), caption=place, reply_markup=bt_sec)
            await bot.send_location(callback.from_user.id, 55.544813, 37.516697, '–°–µ—Ä–≤–∏–≥–æ', '–ú–æ—Å–∫–≤–∞')
            # time.sleep(1)
            # await main_menu(callback)
        case 'company':
            await bot.send_photo(callback.from_user.id, InputFile("Photo/gorshok.jpg"), caption=comp,
                                 reply_markup=bt_sec, )

            # time.sleep(1)
            # await main_menu(callback)


@dp.message_handler(text_contains='', state='*')
async def kat_info(message: types.Message, state: FSMContext):
    await state.set_state()
    await state.finish()
    code = message.text
    bt_reg = InlineKeyboardMarkup()
    bt_reg.add(InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data='register'))
    bt_uprgade = InlineKeyboardMarkup()
    bt_uprgade.add(InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∞–ø–≥—Ä–µ–π–¥', callback_data='upgrade'))
    match code:
        case '–†–µ–º–æ–Ω—Ç':
            await bot.send_photo(message.from_user.id, InputFile('Photo/remont.jpg'), caption=remont,
                                 reply_markup=bt_reg)
        case '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞':
            await bot.send_photo(message.from_user.id, InputFile('Photo/diag.jpg'), caption=diag, reply_markup=bt_reg)
        case '–ê–ø–≥—Ä–µ–π–¥ –ü–ö':
            await bot.send_message(message.from_user.id, text='–ù—É —Ç—É—Ç –Ω—É–∂–Ω–æ —á–µ–∫–∞—Ç—å –≤ –î–ù–° —Ü–µ–Ω—ã.',
                                   reply_markup=bt_uprgade)
        case '–£–¥–∞–ª–µ–Ω–∏–µ –≤–∏—Ä—É—Å–æ–≤':
            await bot.send_photo(message.from_user.id, InputFile("Photo/virus.jpg"), caption=virus)
        case '–ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä?':
            await bot.send_message(message.from_user.id,
                                   text='–ê –º–æ–∂–µ—Ç –Ω—É –µ–≥–æ... –ö–æ–º–ø—ã —ç—Ç–∏ —Å–ª–æ–∂–Ω—ã–µ, –∞?\n –∏ –∫—Å—Ç–∞—Ç–∏, –Ω–µ –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –±–æ–ª—å—à–µ')
            await bot.send_message(message.from_user.id, text='–ë–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ —Ç—É–ø–æ–≥–æ–ª–æ–≤—ã–π')
        case '–°–±–æ—Ä–∫–∞':
            await bot.send_message(message.from_user.id,
                                   text='–ü—Ä–∏–≤–æ–∑–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ. –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —Å–æ–±—Ä–∞—Ç—å –ü–ö –∏ –¥–∞–¥–∏–º —Å–æ–≤–µ—Ç—ã')

