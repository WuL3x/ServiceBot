import time

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, ParseMode, \
    ReplyKeyboardRemove, InlineKeyboardMarkup
from aiogram.utils import markdown
from aiogram.dispatcher.filters import Text

from back.keyboards import bt_sec, bt_feed, kb1
from config import CHANNEL_ID
from main import bot, dp

button_cancel = InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel')
cancelButton = ReplyKeyboardMarkup(resize_keyboard=True).add(button_cancel)



@dp.message_handler(text=['–ú–µ–Ω—é'])
async def main_menu(message: types.Message):
    await bot.send_message(message.from_user.id, reply_markup=kb1, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëáüèª')


def konsult():
    class FormKonsult(StatesGroup):
        type_message = State()
        klient_message = State()

    @dp.message_handler(commands='cancel', state='*')
    @dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    async def cancel(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state is None:
            return

        await message.answer(
            '''–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏‚õî''',
            reply_markup=bt_sec)
        time.sleep(1)
        await main_menu(message)
        await state.finish()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Å–ª—É–∂–±—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    @dp.callback_query_handler(lambda c: c.data == 'konsult', state="*")
    async def answer_k(callback_query: CallbackQuery, state: FSMContext):
        await callback_query.answer()
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å/–ø—Ä–µ—Ç–µ–Ω–∑–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å",
                                            reply_markup=cancelButton)
        ReplyKeyboardRemove()
        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:", reply_markup=bt_feed)
        await FormKonsult.type_message.set()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
    @dp.callback_query_handler(lambda c: c.data.startswith('feed:'), state=FormKonsult.type_message)
    async def process_type(callback: types.CallbackQuery, state: FSMContext):
        async with state.proxy() as data:
            data = callback.data.split(':')
            type_message = data[1]
            await state.update_data(type_message=type_message)

        await bot.send_message(callback.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=cancelButton)
        await FormKonsult.klient_message.set()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    @dp.message_handler(state=FormKonsult.klient_message)
    async def process_klient_message(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['klient_message'] = message.text
            text = "–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Å–ª—É–∂–±—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n"
            text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
            text += f"TG_ID: {message.from_user.id}\n"
            text += f"–¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: {data['type_message']}\n"
            text += f"------------\n"
            text += f"{data['klient_message']}"

            kb_chat = InlineKeyboardMarkup()
            kb_chat.add(InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç",
                                                 url=f"t.me/{message.from_user.username}"))


            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–∞–º–∏ —á–∞—Ç –∏–ª–∏ –≥—Ä—É–ø–ø—É –≤ Telegram
            await bot.send_message(CHANNEL_ID, text, reply_markup=kb_chat)
            if data['type_message'] != '–û—Ç–∑—ã–≤':
                await message.answer(
                    "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                    reply_markup=bt_sec)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            else:
                await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∞—à–µ –Ω–µ—Ä–∞–≤–Ω–æ–¥—É—à–∏–µ –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É!\n"
                                     "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.", reply_markup=bt_sec)
        time.sleep(1)
        await main_menu(message)
        await state.finish()
