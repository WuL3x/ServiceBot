import time
import uuid

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton

from back.keyboards import kb_dev, kb1
from config import CHANNEL_ID
from keyboards import bt_sec
from main import bot, dp

button_cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel')
cancelButton = types.ReplyKeyboardMarkup(resize_keyboard=True).add(button_cancel)


@dp.callback_query_handler(text=['–ú–µ–Ω—é'])
async def main_menu(callback: types.callback_query):
    await bot.send_message(callback.from_user.id, reply_markup=kb1, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëáüèª')


def upgrade():
    class UpgradeForm(StatesGroup):
        issue = State()
        name = State()
        phone = State()
        confirm = State()


    @dp.callback_query_handler(text ='upgrade')
    async def register_order(callback: types.callback_query, state: FSMContext):
        await bot.send_message(callback.from_user.id,
                               f'''{callback.from_user.username}, –º—ã –ø—Ä–æ—Å–∏–º –í–∞—Å —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± 
—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏ –æ–ø–∏—Å—ã–≤–∞—Ç—å –¢–ó –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ.''',
                               reply_markup=cancelButton)
        async with state.proxy() as data:
            data['user_name'] = callback.from_user.username
            data['id_order'] = str(uuid.uuid4().int)[:6]
        await bot.send_message(callback.from_user.id, '–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å.', reply_markup=cancelButton)
        await UpgradeForm.issue.set()


    @dp.message_handler(state='*', commands='cancel')
    @dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    async def cancel(message: types.message, state: FSMContext):
        current_state = await state.get_state()
        if current_state is None:
            return

        await bot.send_message(message.from_user.id, text='''–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏‚õî''', reply_markup=bt_sec)
        time.sleep(1)
        await main_menu(message)
        await state.finish()


    @dp.message_handler(state=UpgradeForm.issue)
    async def process_issue(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['issue'] = message.text

        await message.reply("–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ —Ñ–∞–∏–º–∏–ª–∏—é –∏ –∏–º—è.", reply=False, reply_markup=cancelButton)
        await UpgradeForm.name.set()


    @dp.message_handler(state=UpgradeForm.name)
    async def process_name(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['name'] = message.text

        await message.reply("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply=False, reply_markup=cancelButton)
        await UpgradeForm.phone.set()


    @dp.message_handler(state=UpgradeForm.phone)
    async def process_phone(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['phone'] = message.text

            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = f"–ó–∞—è–≤–∫–∞\n"
            text += f"–ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n"
            text += f"–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {data['id_order']}\n"
            text += f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {data['issue']}\n"
            text += f"–ò–º—è: {data['name']}\n"
            text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"

            kb_con = types.InlineKeyboardMarkup()
            kb_con.insert(types.InlineKeyboardButton(text="–í—Å–µ –≤–µ—Ä–Ω–æ", callback_data='confirm:verno'))
            kb_con.add(types.InlineKeyboardButton(text="–ù–µ—Ç. –ï—Å—Ç—å –æ—à–∏–±–∫–∞", callback_data='confirm:error'))

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(chat_id=message.from_user.id, text=text, parse_mode=ParseMode.HTML,
                                   reply_markup=kb_con)
        await UpgradeForm.confirm.set()


    @dp.callback_query_handler(state=UpgradeForm.confirm)
    async def process_confirm(callback: types.CallbackQuery, state: FSMContext):
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É
        if callback.data.split(':')[1] == 'verno':
            await bot.send_message(callback.from_user.id,
                                   "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä",
                                   reply_markup=bt_sec)
            async with state.proxy() as data:
                text = f"–ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è:\n"
                text += f"TG user name: @{data['user_name']}\n"
                text += f"TG_ID: {callback.from_user.id}\n"
                text += f"–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {data['id_order']}\n"
                text += f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {data['issue']}\n"
                text += f"–ò–º—è: {data['name']}\n"
                text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            kb_chat = InlineKeyboardMarkup()
            kb_chat.add(InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç",
                                             url=f"t.me/{callback.from_user.username}"))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–∞–º–∏ —á–∞—Ç –∏–ª–∏ –≥—Ä—É–ø–ø—É –≤ Telegram
            await bot.send_message(CHANNEL_ID, text, reply_markup=kb_chat)

        elif callback.data.split(':')[1] == 'error':
            reank = types.InlineKeyboardMarkup()
            reank.insert(types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="register"))
            await bot.send_message(callback.from_user.id, "–ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞.",
                                   reply_markup=reank)
            async with state.proxy() as data:
                data['user_name'] = callback.from_user.first_name
                data['id_order'] = data['id_order']
                kb1 = types.InlineKeyboardMarkup()
                kb1.insert(types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="register"))

        time.sleep(1)
        await main_menu(callback)
        await state.finish()
