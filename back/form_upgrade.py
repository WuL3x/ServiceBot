# import sqlite3
# import time
# import uuid
#
# from aiogram import types
# from aiogram.dispatcher import FSMContext
# from aiogram.dispatcher.filters import Text
# from aiogram.dispatcher.filters.state import State, StatesGroup
# from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
#
# from back.keyboards import kb1
# from config import CHANNEL_ID
# from keyboards import bt_sec
# from main import bot, dp, generate_order_id
#
# button_cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel')
# cancelButton = types.ReplyKeyboardMarkup(resize_keyboard=True).add(button_cancel)
# USER_DATA_UP = {}
#
#
# # –ù–ï –î–û–î–ï–õ–ê–ù –ù–£ –ò –í –ü–ò–ó–î–£
# @dp.callback_query_handler(text=['–ú–µ–Ω—é'])
# async def main_menu(callback: types.callback_query):
#     await bot.send_message(callback.from_user.id, reply_markup=kb1, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëáüèª')
#
#
# def upgrade():
#     class UpgradeForm(StatesGroup):
#         issue = State()
#         name = State()
#         phone = State()
#         confirm = State()
#
#     @dp.callback_query_handler(text='upgrade')
#     async def register_order(callback: types.callback_query, state: FSMContext):
#         await bot.send_message(callback.from_user.id,
#                                f'''{callback.from_user.username}, –º—ã –ø—Ä–æ—Å–∏–º –í–∞—Å —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±
# —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏ –æ–ø–∏—Å—ã–≤–∞—Ç—å –¢–ó –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ.''',
#                                reply_markup=cancelButton)
#         async with state.proxy() as data:
#             data['id_client'] = callback.from_user.id
#             data['user_name'] = callback.from_user.username
#             data['id_order'] = generate_order_id()
#             data['device'] = '–ü–ö'
#             data['dev_name'] = '–ü–ö'
#         await bot.send_message(callback.from_user.id, '–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å.',
#                                reply_markup=cancelButton)
#         await UpgradeForm.issue.set()
#
#     @dp.message_handler(state='*', commands='cancel')
#     @dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
#     async def cancel(message: types.message, state: FSMContext):
#         current_state = await state.get_state()
#         if current_state is None:
#             return
#
#         await bot.send_message(message.from_user.id, text='''–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏‚õî''', reply_markup=bt_sec)
#         time.sleep(1)
#         await main_menu(message)
#         await state.finish()
#
#     @dp.message_handler(state=UpgradeForm.issue)
#     async def process_issue(message: types.Message, state: FSMContext):
#         async with state.proxy() as data:
#             data['issue'] = message.text
#
#         await message.reply("–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ —Ñ–∞–∏–º–∏–ª–∏—é –∏ –∏–º—è.", reply=False, reply_markup=cancelButton)
#         await UpgradeForm.name.set()
#
#     @dp.message_handler(state=UpgradeForm.name)
#     async def process_name(message: types.Message, state: FSMContext):
#         async with state.proxy() as data:
#             data['name'] = message.text
#
#         phone_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
#         share = KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
#         phone_keyboard.add(share).row(button_cancel)
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é",
#                              reply_markup=phone_keyboard)
#         await UpgradeForm.phone.set()
#
#     @dp.message_handler(state=UpgradeForm.phone, content_types=[types.ContentType.TEXT, types.ContentType.CONTACT])
#     async def process_phone(message: types.Message, state: FSMContext):
#         if message.contact:
#             phone = message.contact.phone_number
#         else:
#             phone = message.text
#
#         async with state.proxy() as data:
#             data['phone'] = phone
#             await state.update_data(data)
#
#             # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#             text = f"–ó–∞—è–≤–∫–∞\n"
#             text += f"–ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n"
#             text += f"–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {data['id_order']}\n"
#             text += f"–ß—Ç–æ –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å : {data['issue']}\n"
#             text += f"–ò–º—è: {data['name']}\n"
#             text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
#
#             kb_con = types.InlineKeyboardMarkup()
#             kb_con.insert(types.InlineKeyboardButton(text="–í—Å–µ –≤–µ—Ä–Ω–æ", callback_data='confirm:verno'))
#             kb_con.add(types.InlineKeyboardButton(text="–ù–µ—Ç. –ï—Å—Ç—å –æ—à–∏–±–∫–∞", callback_data='confirm:error'))
#
#             # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#             await bot.send_message(chat_id=message.from_user.id, text=text, parse_mode=ParseMode.HTML,
#                                    reply_markup=kb_con)
#         await UpgradeForm.confirm.set()
#
#     @dp.callback_query_handler(state=UpgradeForm.confirm)
#     async def process_confirm(callback: types.CallbackQuery, state: FSMContext):
#         # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É
#         if callback.data.split(':')[1] == 'error':
#             reank = types.InlineKeyboardMarkup()
#             reank.insert(types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="upgrade"))
#             await bot.send_message(callback.from_user.id, "–ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞.",
#                                    reply_markup=reank)
#             async with state.proxy() as data:
#                 data['user_name'] = callback.from_user.first_name
#                 data['id_order'] = data['id_order']
#
#
#
#         elif callback.data.split(':')[1] == 'verno':
#             async with state.proxy() as data:
#                 text = f"–ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è:\n"
#                 text += f"TG user name: @{data['user_name']}\n"
#                 text += f"TG_ID: {callback.from_user.id}\n"
#                 text += f"–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {data['id_order']}\n"
#                 text += f"–ß—Ç–æ –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å : {data['issue']}\n"
#                 text += f"–ò–º—è: {data['name']}\n"
#                 text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
#             USER_DATA_UP=[data['device'], data['user_name'], data['id_order'], data['dev_name'], data['issue'],
#                          data['name'], data['phone'], data['id_client']]
#             kb_chat = InlineKeyboardMarkup()
#             kb_chat.add(InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç",
#                                              url=f"t.me/{callback.from_user.username}"))
#             kb_chat.add(
#                 InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É',
#                                      callback_data=f"confirm_upgrade:{data['id_order']}:yes"))
#             kb_chat.add(
#                 InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data=f"confirm_upgrade:{data['id_order']}:no"))
#
#             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–∞–º–∏ —á–∞—Ç –∏–ª–∏ –≥—Ä—É–ø–ø—É –≤ Telegram
#             await bot.send_message(CHANNEL_ID, text, reply_markup=kb_chat)
#         await state.finish()
#
#
# @dp.callback_query_handler(lambda c: c.data and c.data.startswith('confirm_upgrade'), chat_id=CHANNEL_ID)
# async def agree_to_db(callback: types.CallbackQuery, state: FSMContext):
#     global conn, cursor, USER_DATA_UP
#     await bot.answer_callback_query(callback.id)
#     device, user_name, id_order, dev_name, issue, name, phone, id_client = USER_DATA_UP
#     print(USER_DATA_UP)
#     USER_DATA_UP[int(id_order)] = callback.data.split(':')[1]
#     if callback.data.split(':')[2] == 'yes':
#         try:
#             conn = sqlite3.connect('E:/sqlite3/Servigo')
#             cursor = conn.cursor()
#             # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ö–æ–∂–µ—Å—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∞–π–¥–∏ –∏ –∑–∞—è–≤–∏—Ç–µ–ª—è
#             if callback.from_user.id == USER_DATA_UP[7]:
#
#                 existing_client = "SELECT id_client FROM Clients WHERE tg_username=? OR phone=?"
#                 existing_client = cursor.execute(existing_client, (user_name, phone)).fetchone()
#
#                 if existing_client:
#                     # –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ id_client –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
#                     id_client = existing_client[0]
#
#                 # –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É Clients
#                 else:
#                     insert_client = "INSERT INTO Clients (id_client, tg_username,  familiya_imya, phone) VALUES (?," \
#                                     " ?, ?, ?)"
#                     cursor.execute(insert_client,
#                                    (
#                                        id_client, user_name, name, phone))
#
#                 insert_order = "INSERT INTO Orders (id_order, id_client, issue, id_status, dev_name, device_type)" \
#                                "VALUES (?, ?, ?, ?, ?, ?)"
#                 cursor.execute(insert_order, (id_order, id_client, issue, 1, '–ü–ö', device))
#
#                 # –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É Orders
#                 conn.commit()
#                 print(f'–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–ª—è {USER_DATA_UP[7]}')
#                 await bot.send_message(USER_DATA_UP[7],
#                                        f'''–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É ‚Ññ{id_order}! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.''',
#                                        reply_markup=bt_sec)
#             else:
#                 await bot.send_message(USER_DATA_UP[7], 'pizdec –∫–æ–ª–±–µ–∫ –Ω–µ = —é–∑–µ—Ä_–¥–∞—Ç–∞ ')
#         except sqlite3.Error as error:
#             print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite:', error)
#         finally:
#             if conn:
#                 cursor.close()
#                 conn.close()
#         time.sleep(2)
#         await main_menu(callback, state)
#         USER_DATA_UP = []
#         await state.finish()
#
#     else:
#         await bot.send_message(USER_DATA_UP[7],
#                                f'''‚õî –£–ø—Å! –ó–∞—è–≤–∫–∞ ‚Ññ{id_order} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.''')
#         time.sleep(2)
#         await main_menu(callback, state)
# –Ω–µ —Ä–µ–ª–∏–∑–∞–≤–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –±–¥
